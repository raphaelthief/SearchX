import os, platform, subprocess,requests, shutil, csv, re
import xml.etree.ElementTree as ET
from zipfile import ZipFile
from prettytable import PrettyTable

# colorama
from colorama import init, Fore, Style

init() # Init colorama


EXPLOITDB_REPO = "https://gitlab.com/exploit-database/exploitdb.git"
EXPLOITDB_PAPERS_REPO = "https://gitlab.com/exploit-database/exploitdb-papers.git"

EXPLOITDB_LOCAL_DIR = "Dependencies\\exploitdb"
EXPLOITDB_PAPERS_DIR = "Dependencies\\exploitdb-papers"


PAPERS_CSV = os.path.join("Dependencies\\exploitdb-papers", "files_papers.csv")
EXPLOITS_CSV = os.path.join("Dependencies\\exploitdb", "files_exploits.csv")
SHELLCODES_CSV = os.path.join("Dependencies\\exploitdb", "files_shellcodes.csv")


def update_repo(repo_url, local_dir):
    if os.path.exists(local_dir):
        print(f"{Fore.YELLOW}[!] Check for updates {local_dir}...{Fore.GREEN}")
        subprocess.run(["git", "-C", local_dir, "pull"], check=True)
    else:
        print(f"{Fore.YELLOW}[!] Coning repo {repo_url} to {local_dir}...{Fore.GREEN}")
        subprocess.run(["git", "clone", repo_url, local_dir], check=True)


def initialize_exploitdb():
    try:
        update_repo(EXPLOITDB_REPO, EXPLOITDB_LOCAL_DIR)
        update_repo(EXPLOITDB_PAPERS_REPO, EXPLOITDB_PAPERS_DIR)
    except Exception as e:
        print(f"{Fore.RED}Error : {e}")
        print(f"\n\nContinuing ...{Fore.GREEN}")
        pass


def search_csv(csv_file, search_term=None, cve=None, port=None):
    results = []

    with open(csv_file, newline='', encoding='utf-8') as f:
        reader = csv.DictReader(f)
        headers = reader.fieldnames

        for row in reader:
            description = row['description']
            file_path = row['file']
            tags = row['tags']
            port_column = row[headers[7]]  # Go to 8th column "port"

            if search_term and search_term.lower() not in description.lower():
                continue

            if cve and not any(cve in str(value) for value in row.values()):
                continue

            if port and str(port) not in port_column:
                continue

            results.append((description, file_path))

    return results


def search_exploit(search_term=None, cve=None, port=None):
    papers_results = []
    exploits_results = []
    shellcodes_results = []

    print(f"{Fore.YELLOW}\n[!] Searching for papers...")
    papers_results += search_csv(PAPERS_CSV, search_term, cve, port)

    print(f"{Fore.YELLOW}[!] Searching for exploits...")
    exploits_results += search_csv(EXPLOITS_CSV, search_term, cve, port)

    print(f"{Fore.YELLOW}[!] Searching for shellcodes...")
    shellcodes_results += search_csv(SHELLCODES_CSV, search_term, cve, port)

    start_id = 0

    if papers_results:
        print(f"\n{Fore.GREEN}[+] {Fore.YELLOW}Results for papers ({get_search_criteria(search_term, cve, port)}{Fore.YELLOW})")
        display_table(papers_results, search_term, start_id=start_id)
        start_id += len(papers_results)  

    if exploits_results:
        print(f"\n{Fore.GREEN}[+] {Fore.YELLOW}Results for exploits ({get_search_criteria(search_term, cve, port)}{Fore.YELLOW})")
        display_table(exploits_results, search_term, start_id=start_id)
        start_id += len(exploits_results)  

    if shellcodes_results:
        print(f"\n{Fore.GREEN}[+] {Fore.YELLOW}Results for shellcodes ({get_search_criteria(search_term, cve, port)}{Fore.YELLOW})")
        display_table(shellcodes_results, search_term, start_id=start_id)

    all_results = papers_results + exploits_results + shellcodes_results

    if all_results:
        print(f"\n{Fore.YELLOW}[!] Summary")
        if len(papers_results) > 0:
            print(f"{Fore.GREEN}[+] {Fore.YELLOW}Papers - {Fore.GREEN}{len(papers_results)}")
        if len(exploits_results) > 0:    
            print(f"{Fore.GREEN}[+] {Fore.YELLOW}Exploits - {Fore.GREEN}{len(exploits_results)}")
        if len(shellcodes_results) > 0:
            print(f"{Fore.GREEN}[+] {Fore.YELLOW}Shellcodes - {Fore.GREEN}{len(shellcodes_results)}")
        print("")

        open_file_prompt(all_results)
    else:
        print(f"{Fore.RED}[-] No results found")


def display_table(results, search_term=None, start_id=0):
    terminal_width = get_terminal_width()

    max_total_width = terminal_width - 6  
    max_description_len = max_total_width * (3 / 5)  
    max_file_path_len = max_total_width * (2 / 5)   

    table = PrettyTable()

    table.border = True
    table.junction_char = f"{Fore.YELLOW}|"
    table.header_style = "upper"

    table.field_names = ["ID", "Description", "Path"]
    table.align["Description"] = "l"
    table.align["Path"] = "l"

    for idx, (description, file_path) in enumerate(results, start=start_id):
        truncated_description = truncate_string(description, int(max_description_len))
        truncated_file_path = truncate_string(file_path, int(max_file_path_len))

        highlighted_description = highlight_search_term(truncated_description, search_term)

        table.add_row([
            f"{Fore.GREEN}{idx}{Fore.YELLOW}",  # ID
            f"{Fore.GREEN}{highlighted_description}{Fore.YELLOW}",  # Description
            f"{Fore.GREEN}{truncated_file_path}{Fore.YELLOW}"  # Path
        ])

    print(table)


def open_file_prompt(results):
    choice = input(f"{Fore.YELLOW}[?] Do you want to open a file? (y/n) :{Fore.GREEN} ").strip().lower()

    if choice == 'y':
        try:
            file_id = int(input(f"{Fore.YELLOW}[?] Enter the ID of the file to open :{Fore.GREEN} ").strip())
            if 0 <= file_id < len(results):
                file_path = results[file_id][1]  # 
                open_file(file_path)
            else:
                print(f"{Fore.RED}[-] Invalid ID")
        except ValueError:
            print(f"{Fore.RED}[-] Please enter a valid number")
    else:
        pass


def open_file(file_path):
    try:
        if "exploits" in file_path or "shellcodes" in file_path:
            base_dir = EXPLOITDB_LOCAL_DIR
        elif "docs" in file_path or "papers" in file_path:
            base_dir = EXPLOITDB_PAPERS_DIR
        else:
            print(f"{Fore.RED}[-] Unknown file path.")
            return

        full_path = os.path.join(base_dir, os.path.dirname(file_path))
        print(f"{Fore.GREEN}[+] {Fore.YELLOW}Opening directory : {Fore.GREEN}{full_path}")
        
        if platform.system() == "Windows":
            os.startfile(full_path)  # Windows
        elif platform.system() == "Darwin":
            subprocess.run(["open", full_path])  # macOS
        else:
            subprocess.run(["xdg-open", full_path])  # Linux

    except Exception as e:
        print(f"{Fore.RED}[-] Failed to open the directory: {e}")


def get_search_criteria(search_term=None, cve=None, port=None):
    if search_term:
        return f"term : {Fore.RED}{search_term}"
    elif cve:
        return f"CVE : {Fore.RED}{cve}"
    elif port:
        return f"port : {Fore.RED}{port}"
    else:
        return f"{Fore.RED}None"
        

def truncate_string(s, max_len):
    return s if len(s) <= max_len else s[:max_len - 3] + '...'


def get_terminal_width():
    try:
        return os.get_terminal_size().columns
    except OSError:
        return 80  

def highlight_search_term(text, search_term):
    if search_term:
        pattern = re.compile(re.escape(search_term), re.IGNORECASE)
        highlighted_text = pattern.sub(f"{Fore.RED}\\g<0>{Fore.GREEN}", text)
        return highlighted_text
    return text


def display_table(results, search_term=None, start_id=0):
    terminal_width = get_terminal_width()

    max_total_width = terminal_width - 6  
    max_description_len = max_total_width // 2  
    max_file_path_len = max_total_width - max_description_len  

    table = PrettyTable()

    table.border = True
    table.junction_char = f"{Fore.YELLOW}|"
    table.header_style = "upper"

    table.field_names = ["ID", "Description", "Path"]
    table.align["Description"] = "l"
    table.align["Path"] = "l"

    for idx, (description, file_path) in enumerate(results, start=start_id):
        truncated_description = truncate_string(description, max_description_len)
        truncated_file_path = truncate_string(file_path, max_file_path_len)

        highlighted_description = highlight_search_term(truncated_description, search_term)

        table.add_row([
            f"{Fore.GREEN}{idx}{Fore.YELLOW}",  # ID
            f"{Fore.GREEN}{highlighted_description}{Fore.YELLOW}",  # Description
            f"{Fore.GREEN}{truncated_file_path}{Fore.YELLOW}"  # Path
        ])

    print(table)
    

def initexploitdb(search_term, cve, port):
    initialize_exploitdb()
    search_exploit(search_term=search_term, cve=cve, port=port)


# ============================== GDORKS ==================================
tree = []
root = []

def initialize_dorksdb():
    try:
        update_repo(EXPLOITDB_REPO, EXPLOITDB_LOCAL_DIR)
    except Exception as e:
        print(f"{Fore.RED}Error : {e}")
        print(f"\n\nContinuing ...{Fore.GREEN}")
        pass
        
        
def dorkit(keyword):
    results = []
    if os.path.exists(EXPLOITDB_LOCAL_DIR):
        tree = ET.parse(os.path.join("Dependencies\\exploitdb", "ghdb.xml"))  
        root = tree.getroot()
    else:
        pass
    
    for entry in root.findall('entry'):
        short_description = entry.find('shortDescription').text
        
        if keyword.lower() in short_description.lower():
            entry_info = {
                'ID': entry.find('id').text,
                'Link': entry.find('link').text,
                'Category': entry.find('category').text,
                'Short Description': short_description,
                'Textual Description': entry.find('textualDescription').text,
                'Query String': entry.find('querystring').text,
                'EDB Link': entry.find('edb').text,
                'Date': entry.find('date').text,
                'Author': entry.find('author').text
            }
            results.append(entry_info)
    return results

    
def dorksearch(keyword):

    resultats = dorkit(keyword)
    if resultats:
        print(f"{Fore.YELLOW}[!] Google Dorks for {keyword}")
        for result in resultats:
            print("")
            print(f"{Fore.GREEN}[+] {Fore.RED}{result['Short Description']}")
            print(f"{Fore.YELLOW}[?] Category : {Fore.GREEN}{result['Category']}")
            print("")
            print(f"{Fore.YELLOW}ID : {Fore.GREEN}{result['ID']}")
            print(f"{Fore.YELLOW}Query String : {Fore.GREEN}{result['Query String']}")
            print(f"{Fore.YELLOW}Link : {Fore.GREEN}{result['Link']}")
            print(f"{Fore.YELLOW}EDB Link : {Fore.GREEN}{result['EDB Link']}")
            print(f"{Fore.YELLOW}Date : {Fore.GREEN}{result['Date']}")
            print(f"{Fore.YELLOW}Author : {Fore.GREEN}{result['Author']}")
            print("")
            print(f"{Fore.YELLOW}Textual Description :\n{Fore.GREEN}{result['Textual Description']}")
            print(f"{Fore.YELLOW}-" * 50)
    else:
        pass


